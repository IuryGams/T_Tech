// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             String    @id @default(uuid())
  name           String
  email          String   @unique
  password       String
  is_admin       Boolean @default(false)
  email_verified DateTime?
  profile_image  String?

  accounts Account[]
  sessions Session[]

  address  Address[]
  reviews  Reviews[]
}

model Address {
  id       String  @id @default(uuid())
  name     String?
  district String
  street   String?
  city     String
  number   String?
  cep      String
  state    String
  user_id  String
  user     Users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Products {
  id            String      @id @default(uuid())
  name          String      @unique
  description   String
  price         Decimal     @db.Decimal(10, 2)
  quantity      Int         @default(1)
  in_stock      Boolean     @default(true)
  created_at    DateTime    @default(now()) @map("createdAt")
  updated_at    DateTime    @updatedAt @map("updatedAt")
  category_id   String 
  category      Categories  @relation(fields: [category_id], references: [id])

  images Images[]
  reviews Reviews[]
}

model Images {
  id         String   @id @default(uuid())
  image      String
  color      String?  @default("white")
  color_code String?  @default("FFF")

  product_id String
  product    Products @relation(fields: [product_id], references: [id])
}

model Categories {
  id    String @id @default(uuid())
  name  String @unique

  product Products[]
}

model Reviews {
  id         String   @id @default(uuid())
  rating     Int
  comment    String   @db.Char(250)
  createdAt  DateTime @default(now())
  user_id    String
  product_id String

  product Products @relation(fields: [product_id], references: [id])
  user    Users    @relation(fields: [user_id], references: [id])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
